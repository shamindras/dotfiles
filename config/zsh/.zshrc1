#!/bin/zsh
# .zshrc1
# > First things first - start your .zshrc off right
# Project Home: https://github.com/mattmc3/zshrc1

# Init z1
() {
  typeset -g Z1_VERSION="0.0.1"
  typeset -gaH __z1_opts=(extended_glob NO_monitor NO_xtrace NO_ksh_arrays)

  # Add variables for key Zsh directories.
  export __zsh_config_dir=${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}
  export __zsh_user_data_dir=${XDG_DATA_HOME:-$HOME/.local/share}/zsh
  export __zsh_cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/zsh
  export __zsh_state_dir=${XDG_STATE_HOME:-$HOME/.local/state}/zsh

  # Ensure Zsh directories exist.
  local zdir
  for zdir in __zsh_{config,user_data,cache,state}_dir; do
    [[ -d "${(P)zdir}" ]] || mkdir -p ${(P)zdir}
  done

  # Define Z1 paths
  typeset -g Z1_{COMPLETIONS,CONFIGS,FUNCTION,REPO}_DIR
  typeset -g Z1_{COMPSTYLE,THEME}

  # Directory for Zsh autoload functions.
  zstyle -s ':z1:functions' dir 'Z1_FUNCTION_DIR' \
    || Z1_FUNCTION_DIR=${Z1_FUNCTION_DIR:-$__zsh_config_dir/functions}

  # Directory for cloned Zsh plugin repos.
  zstyle -s ':z1:repos' dir 'Z1_REPO_DIR' \
    || Z1_REPO_DIR=${Z1_REPO_DIR:-$__zsh_cache_dir/repos}

  # Customize with zstyles.
  [[ ! -r $__zsh_config_dir/.zstyles ]] || source $__zsh_config_dir/.zstyles
}

# z1_confd: Source Zsh config files in a conf.d directory.
function z1_confd {
  local confd zfile
  zstyle -s ':z1:configs' dir 'confd' || confd=$__zsh_config_dir/conf.d
  for zfile in $confd/*.zsh(N); do
    [[ ${zfile:t} != '~'* ]] || continue
    source $zfile
  done
}


# z1_plugins: Setup Zsh plugins.
function z1_plugins {
  emulate -L zsh; setopt local_options $__z1_opts

  local repo_dir giturl
  zstyle -s ':z1:repos' repo_dir 'repo_dir' || repo_dir=$__zsh_cache_dir/repos
  zstyle -s ':z1:plugins' git_url  'git_url'  || git_url="https://github.com"

  # Get all the different plugin types.
  local -a {clone,path,fpath,zsh,defer}_plugins
  zstyle -a ':z1:plugins:load:kind' clone 'clone_plugins'
  zstyle -a ':z1:plugins:load:kind' path  'path_plugins'
  zstyle -a ':z1:plugins:load:kind' fpath 'fpath_plugins'
  zstyle -a ':z1:plugins:load:kind' zsh   'zsh_plugins'
  zstyle -a ':z1:plugins:load:kind' defer 'defer_plugins'

  # Combine for cloning missing ones.
  local -a plugins=($clone_plugins $path_plugins $fpath_plugins $zsh_plugins $defer_plugins)

  # Remove bare words ${(M)plugins:#*/*} and paths with leading slash ${plugins:#/*}.
  # Then split/join to keep the 2-part user/repo form to bulk-clone repos.
  local repo; local -aU repos
  for repo in ${${(M)plugins:#*/*}:#/*}; do
    repo=${(@j:/:)${(@s:/:)repo}[1,2]}
    if [[ ! -d $ZSH_REPO_HOME/$repo ]]; then
      (
        command git clone -q --depth 1 --recursive --shallow-submodules \
          $git_url/$repo $ZSH_REPO_HOME/$repo
          plugin-compile $ZSH_REPO_HOME/$repo
      ) &
    fi
  done
  wait
}

# z1_prompt: Setup built-in Zsh prompt system.
function z1_prompt {
  # Set prompt options.
  setopt prompt_subst  # Expand parameters in prompt variables

  # Initialize built-in prompt system.
  autoload -Uz promptinit && promptinit

  # Since we define prompt functions here and not in autoload function files in $fpath,
  # we need to stick the theme's name into `$prompt_themes' ourselves, since promptinit
  # does not pick them up otherwise.
  prompt_themes+=( z1 )
  # Also, keep the array sorted...
  prompt_themes=( "${(@on)prompt_themes}" )

  # Set prompt.
  local -a prompt_argv
  zstyle -a ':z1:prompt' theme 'prompt_argv'
  if [[ $TERM == (dumb|linux|*bsd*) ]]; then
    prompt 'off'
  elif (( $#prompt_argv > 0 )); then
    prompt "$prompt_argv[@]"
  fi
}

# run_compinit: Initialize the built-in Zsh completion system.
function run_compinit {
  emulate -L zsh; setopt local_options $__z1_opts

  # Zsh compdump file.
  typeset -g ZSH_COMPDUMP
  zstyle -s ':z1:completion' compdump 'ZSH_COMPDUMP' ||
    ZSH_COMPDUMP=$__zsh_cache_dir/zcompdump

  # Load and initialize the completion system ignoring insecure directories with a
  # cache time of 20 hours, so it should almost always regenerate the first time a
  # shell is opened each day.
  autoload -Uz compinit
  local comp_files=($ZSH_COMPDUMP(Nmh-20))
  if (( $#comp_files )); then
    compinit -i -C -d "$ZSH_COMPDUMP"
  else
    compinit -i -d "$ZSH_COMPDUMP"
    # Ensure $ZSH_COMPDUMP is younger than the cache time even if it isn't regenerated.
    touch "$ZSH_COMPDUMP"
  fi

  # Compile zcompdump, if modified, in background to increase startup speed.
  {
    if [[ -s "$ZSH_COMPDUMP" && (! -s "${ZSH_COMPDUMP}.zwc" || "$ZSH_COMPDUMP" -nt "${ZSH_COMPDUMP}.zwc") ]]; then
      if command mkdir "${ZSH_COMPDUMP}.zwc.lock" 2>/dev/null; then
        zcompile "$ZSH_COMPDUMP"
        command rmdir  "${ZSH_COMPDUMP}.zwc.lock" 2>/dev/null
      fi
    fi
  } &!
}

# compstyle_z1_setup: Set Zsh completion styles.
function compstyle_z1_setup {
  emulate -L zsh; setopt local_options $__z1_opts

  # Defaults.
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
  zstyle ':completion:*:default' list-prompt '%S%M matches%s'

  # Case-insensitive (all), partial-word, and then substring completion.
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

  # Group matches and describe.
  zstyle ':completion:*:*:*:*:*' menu select
  zstyle ':completion:*:matches' group 'yes'
  zstyle ':completion:*:options' description 'yes'
  zstyle ':completion:*:options' auto-description '%d'
  zstyle ':completion:*:corrections' format ' %F{red}-- %d (errors: %e) --%f'
  zstyle ':completion:*:descriptions' format ' %F{purple}-- %d --%f'
  zstyle ':completion:*:messages' format ' %F{green} -- %d --%f'
  zstyle ':completion:*:warnings' format ' %F{yellow}-- no matches found --%f'
  zstyle ':completion:*' format ' %F{blue}-- %d --%f'
  zstyle ':completion:*' group-name ''
  zstyle ':completion:*' verbose yes

  # Fuzzy match mistyped completions.
  zstyle ':completion:*' completer _complete _match _approximate
  zstyle ':completion:*:match:*' original only
  zstyle ':completion:*:approximate:*' max-errors 1 numeric

  # Increase the number of errors based on the length of the typed word. But make
  # sure to cap (at 7) the max-errors to avoid hanging.
  zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

  # Don't complete unavailable commands.
  zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

  # Array completion element sorting.
  zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

  # Directories
  zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
  zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
  zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
  zstyle ':completion:*' squeeze-slashes true
  zstyle ':completion:*' special-dirs ..

  # History
  zstyle ':completion:*:history-words' stop yes
  zstyle ':completion:*:history-words' remove-all-dups yes
  zstyle ':completion:*:history-words' list false
  zstyle ':completion:*:history-words' menu yes

  # Environment Variables
  zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

  # Ignore multiple entries.
  zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
  zstyle ':completion:*:rm:*' file-patterns '*:all-files'

  # Kill
  zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
  zstyle ':completion:*:*:kill:*' menu yes select
  zstyle ':completion:*:*:kill:*' force-list always
  zstyle ':completion:*:*:kill:*' insert-ids single

  # complete manual by their section
  zstyle ':completion:*:manuals'    separate-sections true
  zstyle ':completion:*:manuals.*'  insert-sections   true
  zstyle ':completion:*:man:*'      menu yes select
}

# plugin-clone: Use git to clone Zsh plugins in parallel.
function plugin-clone {
  emulate -L zsh; setopt local_options $__z1_opts

  local repo_dir git_url
  zstyle -s ':z1:plugins:repos' dir     'repo_dir' || repo_dir=$__zsh_cache_dir/repos
  zstyle -s ':z1:plugins:repos' git_url 'git_url'  || git_url="https://github.com"

  local repo repo_url plugin_dir
  local -Ua repos=($@)
  for repo in $repos; do
    if [[ $repo == (http(|s)://|git@)* ]]; then
      repo_url=$repo
    else
      repo_url=$git_url/$repo
    fi

    plugin_dir=$repo_dir/${${repo_url:t}%.git}
    if [[ ! -d $plugin_dir ]]; then
      echo "Cloning $repo..."
      (
        command git clone --quiet --depth 1 --recursive --shallow-submodules $repo_url $plugin_dir
        plugin-compile $plugin_dir
      ) &
    fi
  done
  wait
}

# plugin-home: Show the plugin home directory
function plugin-home {
  emulate -L zsh; setopt local_options $__z1_opts
  local repo_dir
  zstyle -s ':z1:plugins:repos' dir 'repo_dir' || repo_dir=$__zsh_cache_dir/repos
  print -r -- $repo_dir
}

# plugin-list: List cloned plugins.
function plugin-list {
  emulate -L zsh; setopt local_options $__z1_opts
  local repo_dir plugin_dir
  zstyle -s ':z1:plugins:repos' dir 'repo_dir' || repo_dir=$__zsh_cache_dir/repos
  for plugin_dir in $repo_dir/*/.git(N/); do
    print -r -- ${plugin_dir:A:h:t}
  done
}

# plugin-update: Use git to pull updates to Zsh plugins.
function plugin-update {
  emulate -L zsh; setopt local_options $__z1_opts
  local repo_dir
  zstyle -s ':z1:plugins:repos' dir 'repo_dir' || repo_dir=$__zsh_cache_dir/repos

  local plugin_dir oldsha newsha
  for plugin_dir in $repo_dir/*/.git(N/); do
    plugin_dir=${plugin_dir:A:h}
    echo "Updating ${plugin_dir:t}..."
    (
      oldsha=$(command git -C $plugin_dir rev-parse --short HEAD)
      command git -C $plugin_dir pull --quiet --ff --depth 1 --rebase --autostash
      newsha=$(command git -C $plugin_dir rev-parse --short HEAD)
      [[ $oldsha == $newsha ]] || echo "Plugin updated: $plugin_dir:t ($oldsha -> $newsha)"
    ) &
  done
  wait
  plugin-compile
  echo "Update complete."
}

# plugin-compile: Compile plugins.
function plugin-compile {
  emulate -L zsh; setopt local_options $__z1_opts
  local repo_dir
  zstyle -s ':z1:plugins:repos' dir 'repo_dir' || repo_dir=$__zsh_cache_dir/repos
  autoload -Uz zrecompile
  local zfile
  for zfile in ${1:-$repo_dir}/**/*.zsh{,-theme}(N); do
    [[ $zfile != */test-data/* ]] || continue
    zrecompile -pq "$zfile"
  done
}

# Run z1.
() {
  z1_confd
  # z1_funcdir
  # z1_colorize
  # z1_directory
  # z1_editor
  # z1_history
  # z1_utility
  z1_plugins
  # z1_completions
  # z1_prompt
}

# vim: ft=zsh 
